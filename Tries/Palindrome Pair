Palindrome Pair

Given 'n' number of words,you need to find if there exist any two words which can be joined to make a palindrome or any word,
which itself is a palindrome.
The function should return either true or false. You don't have to print anything.

Input Format :
The first line of the test case contains an integer value denoting 'n'.
The following contains 'n' number of words each separated by a single space.

Output Format :
The first and only line of output contains true if the conditions described in the task are met and false otherwise.

Constraints:
0 <= n <= 10^5
Time Limit: 1 sec


Sample Input 1 :
4
abc def ghi cba

Sample Output 1 :
true

Explanation of Sample Input 1:
"abc" and "cba" forms a palindrome

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public boolean isPalindromePair(ArrayList<String> words) {
		for (int i = 0; i < words.size(); i++) {
            // reverse the string
            String string = reverse(words.get(i));

            // creating a new Trie for storing reverse string
            Trie suffixTrie = new Trie();
            for (int j = 0; j < string.length(); j++) {
                // adding reverse string to the Trie
                suffixTrie.add(string.substring(j));
            }
            
            for (String word : words) {
                if (suffixTrie.search(word)) {
                    return true;
                }
            }
        }
        return false;
	}

	private String reverse(String str) {
        // creating an empty string
        String newString = "";

        //until string length gets 0
        while (str.length() != 0) {
            // adding first character to the new string
            newString = str.charAt(0) + newString;
            //passing substring from index 1
            str = str.substring(1);
        }
        return newString;
    }
