K smallest elements

You are given with an integer k and an array of integers that contain numbers in random order. 
Write a program to find k smallest numbers from given array. You need to save them in an array and return it.
Time complexity should be O(n * logk) and space complexity should not be more than O(k).
Note: Order of elements in the output is not important.

Input Format :
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N.
The following line contains N space separated integers, that denote the value of the elements of the array.
The following line contains an integer, that denotes the value of k.

Output Format :
The first and only line of output print k smallest elements. The elements in the output are separated by a single space. 

Constraints:
Time Limit: 1 sec

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

import java.util.ArrayList;
import java.util.*;

public class Solution {

	public static ArrayList<Integer> kSmallest(int n, int[] input, int k) {
		// Write your code here
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
		ArrayList<Integer> output = new ArrayList<>();

		int i = 0;
		for (; i < k; i++) {
			// adding first k elements in the Heap from the array
			pq.add(input[i]);
		}

		// for remaining elements compare the element with max of pq i.e. top
		for ( ; i < n; i++) {
			if (input[i] < pq.element()) {
				pq.remove();
				pq.add(input[i]);
			}
		}

		while (!pq.isEmpty()) {
			output.add(pq.element());
			pq.remove();
		}
		return output;
	}
}
