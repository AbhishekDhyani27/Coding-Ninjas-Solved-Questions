Code : Minimum Cost Path

An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.

Input format :
The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. 
They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.
The second line onwards, the next 'M' lines or rows represent the ith row values.
Each of the ith row constitutes 'N' column values separated by a single space.

Output format :
Print the minimum cost to reach the destination.

Constraints :
1 <= M <= 10 ^ 2
1 <= N <=  10 ^ 2
Time Limit: 1 sec


Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//RECURSIVE METHOD

public static int minCostPath(int[][] input) {
        return minCostPath(input, 0, 0);
    }

    //Min Cost Path from cell (i, j) to cell (row-1, col-1)
    private static int minCostPath(int[][] input, int i, int j) {

        int row = input.length;
        int col = input[0].length;

        // base Case - 1
        // if we at the destination already then minimum cost path is
        // value of last cell itself
        if(i == row-1 && j == col-1) {
            return input[i][j];
        }

        // base Case - 2
        // if i and j goes out of bound then return infinity Number
        if(i >= row && j >= col) {
            return Integer.MAX_VALUE;
        }
        //if we are not at destination already then
        // find all the possible minimum paths
        int op1 = minCostPath(input,i,j+1);
        // for travelling diagonally
        int op2 = minCostPath(input,i+1,j+1);
        int op3 = minCostPath(input,i+1,j);

        // at last return the min among all three and then return it
        //along with source value
        return input[i][j] + Math.min(op1, Math.min(op2, op3));
    }
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//MEMOIZATION METHOD

 public static int minCostPathM(int[][] input) {
        int row = input.length;
        int col = input[0].length;

        // it will store the value to the destination
        int[][] storage = new int[row][col];

        //initially storage contains -1
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                storage[i][j] = -1;
            }
        }
        return minCostPathM(input, 0, 0, storage);
    }

    private static int minCostPathM(int[][] input, int i, int j, int[][] storage) {

        int row = input.length;
        int col = input[0].length;

        // base Case - 1
        // if i and j goes out of bound then return infinity Number
        if(i >= row && j >= col) {
            return Integer.MAX_VALUE;
        }

        // base Case - 2
        // if we at the destination already then minimum cost path is
        // value of last cell itself
        if(i == row-1 && j == col-1) {
            storage[row-1][col-1] = input[i][j];
            return storage[i][j];
        }

        if(storage[i][j] != -1) {
            return storage[i][j];
        }

        //if we are not at destination already then
        // find all the possible minimum paths
        int op1 = minCostPathM(input,i,j+1,storage);
        // for travelling diagonally
        int op2 = minCostPathM(input,i+1,j+1,storage);
        int op3 = minCostPathM(input,i+1,j,storage);

        storage[i][j] = input[i][j] + Math.min(op1, Math.min(op2, op3));

        return storage[i][j];
    }
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
    
    //DP METHOD
    
    
public class Solution {

	public static int minCostPath(int[][] input) {
		int row = input.length;
        int col = input[0].length;

        // it will store the value to the destination
        int[][] storage = new int[row][col];

        storage[row-1][col-1] = input[row-1][col-1];

        //calculating last Row of the matrix
        for(int j=col-2; j>=0; j--) {
            //last cell + previous cell in the last row
            storage[row-1][j] = storage[row-1][j+1] + input[row-1][j];
        }

        //calculating last Column of the matrix
        for(int i=row-2; i>=0; i--) {
            //last cell + previous cell in the last row
            storage[i][col-1] = storage[i+1][col-1] + input[i][col-1];
        }

        //now filling up the rest rows
        for(int i=row-2; i>=0; i--) {
            for(int j=col-2 ; j>=0; j--) {
                storage[i][j] = input[i][j] + Math.min(storage[i][j+1],
                        Math.min(storage[i+1][j+1],storage[i+1][j]));
            }
        }
        return storage[0][0];
	}
}
