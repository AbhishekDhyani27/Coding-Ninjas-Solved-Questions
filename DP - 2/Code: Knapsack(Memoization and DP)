Code: Knapsack(Memoization and DP)

A thief is robbing a store and can carry a maximal weight of W into his knapsack. 
There are N items and ith item weighs wi and is of value vi. 
Considering the constraints of maximum weight that knapsack can carry, 
you have to find and return the maximum value that thief can generate by stealing items.

Note:
Space complexity should be O(W).

Input Format :
The first line contains an integers, that denote the value of N.
The following line contains N space separated integers, that denote the values of weight of items.
The following line contains N space separated integers, that denote the values associated with the items. The following line contains an integer that denote the value of W. W denotes maximum weight that thief can carry.

Output Format :
The first and only line of output contains the maximum value that thief can generate, as described in the task. 

Constraints:
1 <= N <= 10^4
1<= wi <= 100
1 <= vi <= 100
Time Limit: 1 second


Sample Input 1 :
4
1 2 4 5
5 4 8 6
5
Sample Output 1 :
13

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//MEMOIZATION METHOD

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] storage = new int[n][maxWeight+1];

        //initially storage contains -1
        for(int i=0; i<n; i++) {
            for(int j=0; j<maxWeight+1; j++) {
                storage[i][j] = -1;
            }
        }

        return knapsackMem(weights,values,n-1,maxWeight, storage);
    }
    
    //2D array used because 2parameters are changing
    private static int knapsackMem(int[] weights, int[] values, int index, int maxWeight, int[][] storage) {

        // Base Case
        //travelling from Right to left
        // if only 1item to steal, then compare it with knapsack Maximum capacity
        if(index == 0) {
            //if weight at 0th index is less than Maximum Weight then return its Value
            if(weights[0] <= maxWeight) {
                return values[0];
            }
            // else return 0
            else {
                return 0;
            }
        }

        if(storage[index][maxWeight] != -1) {
            return storage[index][maxWeight];
        }

        // initially no element is added
        int include = 0;

        // if weight of current index is less than max weight
        if(weights[index] <= maxWeight) {
            // then include it and decrease then index and decrease Maximum weight
            // as some value is occupied by current value weight
            include = values[index] + knapsackMem(weights, values, index-1, maxWeight-weights[index],storage);
        }

        // while excluding we add nothing and decrease the index for next iteration
        // and maxWeight remains the same
        int exclude = knapsackMem(weights, values, index-1, maxWeight, storage);

        // we have to return the maximum answer
        storage[index][maxWeight] = Math.max(include,exclude);
        return storage[index][maxWeight];
    }
}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'''''

//DP METHOD

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[n+1][maxWeight+1];
		
		for (int i=n-1;i>=0;i--)
		{
			for (int w=0;w<=maxWeight;w++)
			{
				if (weight[i]<=w)
				{
					int ans1=dp[i+1][w];
					int ans2=dp[i+1][w-weight[i]] + value[i];
					dp[i][w]=Math.max(ans1, ans2);
				}
				else
				{
					dp[i][w]=dp[i+1][w];
				}
			}
		}
		return dp[0][maxWeight];
    }
}
