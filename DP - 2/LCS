LCS

Given two strings, 'S' and 'T' with lengths 'M' and 'N', find the length of the 'Longest Common Subsequence'.
For a string 'str'(per se) of length K, the subsequences are the strings containing characters 
in the same relative order as they are present in 'str,' but not necessarily contiguous.
Subsequences contain all the strings of length varying from 0 to K.

Example :
Subsequences of string "abc" are:  ""(empty string), a, b, c, ab, bc, ac, abc.

Input format :
The first line of input contains the string 'S' of length 'M'.
The second line of the input contains the string 'T' of length 'N'.

Output format :
Return the length of the Longest Common Subsequence.

Constraints :
0 <= M <= 10 ^ 3
0 <= N <= 10 ^ 3
Time Limit: 1 sec


Sample Input 1 :
adebc
dcadb
Sample Output 1 :
3
Explanation of the Sample Output 1 :
Both the strings contain a common subsequence 'adb', which is the longest common subsequence with length 3. 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'

//RECURSIVE METHOD

    public static int lcs(String s, String t) {
        return lcs(s, t, 0, 0);
    }

    private static int lcs(String s, String t, int i, int j) {

        //Base Case
        //if we went outside string then return 0
        if(i == s.length() || j == t.length()) {
            return 0;
        }

        int ans = 0;

        if(s.charAt(i) == t.charAt(j)) {
            ans = 1 + lcs(s,t,i+1,j+1);
        }
        else {
            ans = Math.max(lcs(s,t,i,j+1),lcs(s,t,i+1,j));
        }

        return ans;
    }
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    
    //MEMOIZATION METHOD
    
    public static int lcsM(String s, String t) {
        int[][] storage = new int[s.length()][t.length()];

        //initially storage contains -1
        for(int i=0; i<s.length(); i++) {
            for(int j=0; j<t.length(); j++) {
                storage[i][j] = -1;
            }
        }
        return lcsM(s, t, 0, 0, storage);
    }

    private static int lcsM(String s, String t, int i, int j, int[][] storage) {
        //Base Case
        //if we went outside string then return 0
        if(i == s.length() || j == t.length()) {
            return 0;
        }

        if(storage[i][j] != -1) {
            return storage[i][j];
        }

        int ans = 0;

        if(s.charAt(i) == t.charAt(j)) {
            ans = 1 + lcsM(s,t,i+1,j+1,storage);
        }
        else {
            ans = Math.max(lcsM(s,t,i,j+1,storage),lcsM(s,t,i+1,j,storage));
        }

        return storage[i][j] = ans;
    }
    
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    
    //DP METHOD
    
    public class Solution {

	public static int lcs(String s, String t) {
		int[][] storage = new int[s.length()+1][t.length()+1];

        //Here we have to do Bottom-Up Calculation means from Length-1 to 0
        for(int i=s.length()-1; i>=0; i--) {
            for(int j=t.length()-1; j>=0; j--) {
                int ans = 0;

                if(s.charAt(i) == t.charAt(j)) {
                    ans = 1 + storage[i+1][j+1];
                }
                else {
                    ans = Math.max(storage[i][j+1],storage[i+1][j]);
                }

                storage[i][j] = ans;
            }
        }
        return storage[0][0];
    }
}
