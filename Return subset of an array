Return subset of an array

Given an integer array (of length n), find and return all the subsets of input array.
Subsets are of length varying from 0 to n, that contain elements of the array. But the order of elements should remain same as in the input array.

Note : The order of subsets are not important.

Input format :
Line 1 : Size of array
Line 2 : Array elements (separated by space)

Sample Input:
3
15 20 12

Sample Output:
[] (this just represents an empty array, don't worry about the square brackets)
12 
20 
20 12 
15 
15 12 
15 20 
15 20 12 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class solution {
	// Return a 2D array that contains all the subsets
	public static int[][] subsets(int input[]) {
		// Write your code here
        return subsets(input,0);
	}
    private static int[][] subsets(int[] input, int startIndex) {
        if(startIndex >= input.length) {
            int[][] ans=new int[1][0];
            return ans;
        }

        int[][] smallans = subsets(input,startIndex+1);
        int[][] output = new int[smallans.length*2][];

        //storing values of smallans in output array
        int k=0;
        for(int i=0; i<smallans.length; i++) {
            output[k]=new int[smallans[i].length];
            for(int j=0; j<smallans[i].length; j++) {
                output[k][j] = smallans[i][j];
            }
            k++;
        }

        for(int i=0; i<smallans.length; i++) {
            output[k] = new int[smallans[i].length+1];
            output[k][0]=input[startIndex];
            for(int j=1; j<=smallans[i].length; j++) {
                output[k][j] = smallans[i][j-1];
            }
            k++;
        }
        return output;
    }
}
