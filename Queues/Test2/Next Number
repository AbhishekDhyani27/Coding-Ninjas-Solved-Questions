Next Number

Given a large number represented in the form of a linked list.
Write code to increment the number by 1 in-place(i.e. without using extra space).

Note: You don't need to print the elements, just update the elements and return the head of updated LL.

Input Constraints:
1 <= Length of Linked List <=10^6.

Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)

Output Format :
Line 1: Updated linked list elements 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'

/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/

public class Solution {
	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
        head = reverse(head);
        LinkedListNode<Integer> current = head;
        while (current != null) {
            if(current.next == null && current.data == 9) {
                current.data = 1;
                LinkedListNode<Integer> temp = new LinkedListNode<>(0); // creating new node for(0)
                temp.next = head;   // assigning it to the head and its next pointing to head
                head = temp;  // now head is temp
                current = current.next;
            }
            else if(current.data == 9) {
                current.data = 0;
                current = current.next;
            }
            else {
                current.data = current.data + 1;
                current = current.next;
                break;
            }
        }
        head = reverse(head);
        return head;
	}
    
    private static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head) {
        if(head==null || head.next==null) {
            return head;
        }
        LinkedListNode<Integer> ans = reverse(head.next);
        // for getting last element
        head.next.next = head;
        // putting null in head of next to denote it is last element now
        head.next = null;
        return ans;
    }
}
