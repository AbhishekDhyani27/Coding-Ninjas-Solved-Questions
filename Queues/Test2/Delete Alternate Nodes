Delete Alternate Nodes

Given a Singly Linked List of integers, delete all the alternate nodes in the list.

Example:
List: 10 -> 20 -> 30 -> 40 -> 50 -> 60 -> null

Alternate nodes will be:  20, 40, and 60.
Hence after deleting, the list will be:

Output: 10 -> 30 -> 50 -> null

Note :
The head of the list will remain the same. Don't need to print or return anything.

Input format :
The first and the only line of input will contain the elements of the Singly Linked List separated by a single space and terminated by -1.

Output Format :
The only line of output will contain the updated list elements.

Input Constraints:
1 <= N <= 10 ^ 6.
Where N is the size of the Singly Linked List
Time Limit: 1 sec

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class Solution {

    public static void deleteAlternateNodes(Node<Integer> head) {
        //Your code goes here
        if(head == null || head.next == null) {
            return;
        }
        while(head.next != null){
             if(head.next.next != null){
             head.next = head.next.next; // linking odd node to next odd node, while skipping even node between them
             head = head.next;
             }
             else {
                 head.next = null;
             }
         }
    }
}
