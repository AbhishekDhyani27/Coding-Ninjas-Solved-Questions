Code: Construct BST From Sorted Array

Given a sorted integer array A of size n, which contains all unique elements. You need to construct a balanced BST from this input array.
Return the root of constructed BST.
Note: If array size is even, take first mid as root.

Input format:
The first line of input contains an integer, which denotes the value of n.
The following line contains n space separated integers, that denote the values of array.

Output Format:
The first and only line of output contains values of BST nodes, printed in pre order traversal.

Constraints:
Time Limit: 1 second

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    public static BinaryTreeNode<Integer> SortedArrayToBST(int[] arr, int n){
        n = arr.length;
        return function(arr, 0, n-1);
    }

    private static BinaryTreeNode<Integer> function(int[] arr, int start, int end) {
        // base case
        if(start > end) {
            return null;
        }

        // finding mid of the array
        int mid = (start+end)/2;

        // creating root node which is middle element of the array
        BinaryTreeNode<Integer> root = new BinaryTreeNode<>(arr[mid]);

        root.left = function(arr, start, mid-1);
        root.right = function(arr, mid+1, end);

        return root;
    }
