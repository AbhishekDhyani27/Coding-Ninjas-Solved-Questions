Code : Is Connected ?

Given an undirected graph G(V,E), check if the graph G is connected graph or not.

Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex a and b.

Output Format :
The first and only line of output contains "true" if the given graph is connected or "false", otherwise.

Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second


Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
true

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

    public static boolean isConnected(int[][] edges, int firstVertex) {

		boolean[] visited = new boolean[edges.length];
		Queue<Integer> queue = new LinkedList<>();
		queue.add(firstVertex);
		visited[firstVertex] = true;

		while (!queue.isEmpty()) {
			int front = queue.poll();
			for (int i = 0; i < edges.length; i++) {
				if (!visited[i] && edges[front][i] == 1) {
					queue.add(i);
					visited[i] = true;
				}
			}
		}

		// now loop through visited array &
		// if you have any Unvisited that is false value means graph is not connected
		for (boolean b : visited) {
			if (!b) {
				return false;
			}
		}
		// if all values are true, means graph is connected
		return true;
	}

	public static void main(String[] args) throws NumberFormatException, IOException {
		Scanner sc = new Scanner(System.in);
		int V = sc.nextInt();
		int E = sc.nextInt();
		
		// this checks for case when the user enters 0 vertex
		// means there is no vertex
		if (V == 0) {
			System.out.print("true");
			return;
		}
		

		int[][] edges = new int[V][V]; // we have created an adjacency matrix of v*v

		// taking input for the graph, loop through the edges
		for (int i = 0; i < E; i++) {
			int firstVertex = sc.nextInt();
			int secondVertex = sc.nextInt();

			// this works only in an undirected graph
			edges[firstVertex][secondVertex] = 1;
			edges[secondVertex][firstVertex] = 1;
		}
		System.out.println(isConnected(edges, 0));
	}
}
