Code : Has Path

Given an undirected graph G(V, E) and two vertices v1 and v2 (as integers), check if there exists any path between them or not.
Print true if the path exists and false otherwise.

Note:
1. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
2. E is the number of edges present in graph G.

Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains two integers, that denote that there exists an edge between vertex 'a' and 'b'.
The following line contain two integers, that denote the value of v1 and v2.

Output Format :
The first and only line of output contains true, if there is a path between v1 and v2 and false otherwise.

Constraints :
0 <= V <= 1000
0 <= E <= 1000
0 <= a <= V - 1
0 <= b <= V - 1
0 <= v1 <= V - 1
0 <= v2 <= V - 1
Time Limit: 1 second


Sample Input 1 :
4 4
0 1
0 3
1 2
2 3
1 3
Sample Output 1 :
true

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'

import java.util.LinkedList;
import java.util.Queue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.*;

public class Solution {

    public static boolean hasPath(int[][] edges,int V1, int V2,boolean[] visited){

        // if any of the vertices is out of total length then return false
        if(V1>edges.length || V2>edges.length){
            return false;
        }

        // if there is a direct edge between the two then return true
        if(edges[V1][V2] == 1)
            return true;

        Queue<Integer> q = new LinkedList<>();
        q.add(V1);
        visited[V1] = true;
        while(!q.isEmpty()){
            int n = q.remove();
            for(int i=0; i<edges.length; i++) {
                if(edges[n][i] == 1 && !visited[i]) {
                    q.add(i);
                    visited[i] = true;
                }
            }
        }

        return visited[V2];
    }

	public static void main(String[] args) throws NumberFormatException, IOException {

		Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        int[][] edges = new int[V][V];
        for(int i=0; i<E; i++) {
            int firstVertex = sc.nextInt();
            int secondVertex = sc.nextInt();
            edges[firstVertex][secondVertex] = 1;
            edges[secondVertex][firstVertex] = 1;
        }

        // two vertices whose path we have to find
        int V1 = sc.nextInt();
        int V2 = sc.nextInt();

        if(V2 >= V) { // Here, we are checking for an array index out of bounds exception
            System.out.println("false");
            return;
        }

        boolean[] visited = new boolean[V];

        boolean ans = hasPath(edges, V1, V2, visited);
        System.out.println(ans); 
	}
}
