Print nodes at distance k from node

You are given a Binary Tree of type integer, a target node, and an integer value K.
Print the data of all nodes that have a distance K from the target node. The order in which they would be printed will not matter.

Input Format:
The first line of input will contain the node data, all separated by a single space. 
Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
The second line of input contains two integers separated by a single space, representing the value of the target node and K, respectively.

Output Format:
All the node data at distance K from the target node will be printed on a new line.
The order in which the data is printed doesn't matter.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''

public class Solution {

	public static void nodesAtDistanceK(BinaryTreeNode<Integer> root, int node, int k) {
	    int x = print(root,k,node);
	}
    
    public static void printSubtrees(BinaryTreeNode<Integer> root, int k) {
        if(root == null || k <0) {
            return;
        }
        // on reaching distance node from target
        if(k == 0 && root != null) {
            System.out.println(root.data);
            return;
        }

        printSubtrees(root.left, k-1);
        printSubtrees(root.right, k-1);
    }

    private static int print(BinaryTreeNode<Integer> root, int k, int node) {
        if(root == null){
            return -1;
        }

        if(root.data == node){
            printSubtrees(root,k);
            return 0;
        }

        int ld = print(root.left, k, node);

        int rd;
        if(ld == -1){
            rd = print(root.right, k, node);
            if(rd == -1){
                return -1;
            }
            else if(rd + 1 == k) {
                System.out.println(root.data+" ");
                return k;
            }
            else{
                printSubtrees(root.left,k-rd-2);
                return rd+1;
            }
        }
        else if(ld + 1 == k){
            System.out.println(root.data+" ");
            return k;
        }else{
            printSubtrees(root.right,k-ld-2);
            return ld+1;
        }
    }
}
