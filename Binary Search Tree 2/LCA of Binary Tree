LCA of Binary Tree

Given a binary tree and data of two nodes, find 'LCA' (Lowest Common Ancestor) of the given two nodes in the binary tree.

LCA:
LCA of two nodes A and B is the lowest or deepest node which has both A and B as its descendants. 

Note:
It is defined that each node is a descendant to itself, so, if there are two nodes X and Y and X has a direct connection from Y,
then Y is the lowest common ancestor.
1. If out of 2 nodes only one node is present, return that node. 
2. If both are not present, return -1.

Input format:
The first line of input contains data of the nodes of the tree in level order form.
The data of the nodes of the tree is separated by space. If any node does not have left or right child, take -1 in its place. 
Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
The following line of input contains two integers, denoting the value of data of two nodes of given binary tree.

Output Format:
The first and only line of output contains the data associated with the lowest common ancestor node.

Constraints:
Time Limit: 1 second

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class Solution {

	static int getLCA(BinaryTreeNode<Integer> root, int a, int b) {
        // if root is null then return -1
        if(root == null) {
            return -1;
        }

        // if root data is equal to a or b then return root data as it will going to be LCA
        if(root.data == a || root.data == b) {
            return root.data;
        }

        // calling on left subtree
        int left = getLCA(root.left, a , b);
        // calling on right subtree
        int right = getLCA(root.right, a ,b);

        // if we get -1 from left subtree(i.e. element is not found in left subtree then return right element)
        if(left == -1) return right;
        // if we get -1 from right subtree(i.e. element is not found in right subtree then return left element)
        if(right == -1) return left;

        // if elements are found on both sides then return root data
        return root.data;
	}
}
