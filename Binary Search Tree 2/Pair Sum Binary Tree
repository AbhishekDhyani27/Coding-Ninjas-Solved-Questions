Pair Sum Binary Tree

Given a binary tree and an integer S, print all the pair of nodes whose sum equals S.

Note:
1. Assume the given binary tree contains all unique elements.
2. In a pair, print the smaller element first. Order of different pairs doesn't matter.

Input format :
The first line of input contains data of the nodes of the tree in level order form. 
The data of the nodes of the tree is separated by space. If any node does not have a left or right child, take -1 in its place. 
Since -1 is used as an indication whether the left or right nodes exist, therefore, it will not be a part of the data of any node.
The following line of input contains an integer, that denotes the value of S.

Output Format :
Print each pair in a new line, as described in the task. 

Constraints:
Time Limit: 1 second

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

import java.util.ArrayList;
import java.util.Collections;

public class Solution {

	static void pairSum(BinaryTreeNode<Integer> root, int sum) {
        if (root==null) {
            return;
        }
        else {
            // converting tree to an array by creating an ArrayList
            ArrayList<Integer> array = convertToArray(root);
            Collections.sort(array);
            printPairSum(array, sum);
        }
	}
    
    private static ArrayList<Integer> convertToArray(BinaryTreeNode<Integer> root) {
        if (root==null) {
            return new ArrayList<>();
        }

        ArrayList<Integer> currArr = new ArrayList<>();
        ArrayList<Integer> leftArr = convertToArray(root.left);
        // if leftArr is not empty add elements to currArr
        if (!leftArr.isEmpty()) {
            currArr.addAll(leftArr);
        }
        currArr.add(root.data);
        ArrayList<Integer> rightArr = convertToArray(root.right);
        // if rightArr is not empty add elements to currArr
        if (!rightArr.isEmpty()) {
            currArr.addAll(rightArr);
        }
        return currArr;
    }

    private static void printPairSum(ArrayList<Integer> array, int s) {
        int i = 0;
        int j = array.size()-1;

        while(i < j) {
            // value at array[i]
            int val1 = array.get(i);
            // value at array[j]
            int val2 = array.get(j);
            // if value is greater than sum then decrement j
            if (val1+val2 > s) {
                j = j-1;
            }
            // if value is lesser than sum then increment i
            else if(val1+val2 < s) {
                i = i+1;
            }
            // if value is equal to sum then increment i and decrement j 
            else {
                System.out.println(val1+" "+val2);
                i = i+1;
                j = j-1;
            }
        }
    }
}

