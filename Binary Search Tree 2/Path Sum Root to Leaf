Path Sum Root to Leaf

For a given Binary Tree of type integer and a number K, print out all root-to-leaf paths where the sum of all the node data along the path is equal to K.

Input Format:
The first line of input will contain the node data, all separated by a single space.
Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
The second line of input contains an integer value K.

Output Format:
Lines equal to the total number of paths will be printed. 
All the node data in every path will be printed in a linear fashion taken in the order they appear from top to down bottom in the tree.
A single space will separate them all.

Constriants:
1 <= N <= 10^5
0 <= K <= 10^8
Where N is the total number of nodes in the binary tree.
Time Limit: 1 second

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public static void rootToLeafPathsSumToK(BinaryTreeNode<Integer> root, int k) {
        // creating a string and pass it in a function
        String str = "";
        rootToLeafPathsSumToK(root, k, str);
    }

    private static void rootToLeafPathsSumToK(BinaryTreeNode<Integer> root, int k, String str) {
        if (root==null) {
            return;
        }
        // creating root data
        int rootData = root.data;
        // adding root data to the empty string
        str = str + rootData + " ";

        if(k == rootData && root.left == null && root.right == null) {
            System.out.println(str);
            return;
        }
        // updating string in every call
        rootToLeafPathsSumToK(root.left, k-rootData, str);
        rootToLeafPathsSumToK(root.right, k-rootData, str);
    }
