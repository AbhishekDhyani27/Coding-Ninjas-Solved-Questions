Minimum Length Word

Given a string S (that can contain multiple words), you need to find the word which has minimum length.

Note : If multiple words are of same length, then answer will be first minimum length word in the string.
Words are seperated by single space only.

Input Format :
String S

Output Format :
Minimum length word

Constraints :
1 <= Length of String S <= 10^5

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class Solution {
	
	public static String minLengthWord(String input){
		
		// Write your code here
        String[] arr= input.split(" ");
        int minlength;
        minlength=Integer.MAX_VALUE;
        String smallest = "";
        for(int i=0; i<arr.length; i++){
            if(arr[i].length() < minlength){
                smallest=arr[i];
                minlength=arr[i].length();
            }
        }
        return smallest;
	}
}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''

Leaders in array

Given an integer array A of size n. Find and print all the leaders present in the input array. An array element A[i] is called Leader, if all the elements following it (i.e. present at its right) are less than or equal to A[i].
Print all the leader elements separated by space and in the same order they are present in the input array.
Input Format :
Line 1 : Integer n, size of array
Line 2 : Array A elements (separated by space)
Output Format :
 leaders of array (separated by space)
Constraints :
1 <= n <= 10^6

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''

public class Solution {

	public static void leaders(int[] input) {
		/* Your class should be named Solution 
		 * Don't write main(). 
		 * Don't read input, it is passed as function argument. 
		 * Print output and don't return it. 
		 * Taking input is handled automatically. 
		 */
          int size=input.length;
        for (int i = 0; i < size; i++)  
        { 
            int j; 
            for (j = i + 1; j < size; j++)  
            { 
                if (input[i] < input[j]) 
                    break; 
            } 
            if (j == size) // the loop didn't break 
                System.out.print(input[i] + " "); 
        } 
	}	
}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Print 2D Array

Given a 2D integer array with n rows and m columns. Print the 0th row from input n times, 1st row n-1 timesâ€¦..(n-1)th row will be printed 1 time.
Input format :
Line 1 : No of rows (n) and no of columns (m) (separated by single space)
Line 2 : Row 1 elements (separated by space)
Line 3 : Row 2 elements (separated by space)
Line 4 : and so on

Sample Input 1:
3 3
1 2 3
4 5 6
7 8 9

Sample Output 1 :
1 2 3
1 2 3
1 2 3
4 5 6
4 5 6
7 8 9

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class solution {
	public static void print2DArray(int input[][]) {
		// Write your code here
          int rows = input.length;
        int cols = input[0].length;
        for(int i=0; i<rows; i++) {
            int count = rows-i;
            while(count!=0) {
                for (int j = 0; j < cols; j++) {
                    System.out.print(input[i][j] + " ");
                }
                System.out.println();
                count--;
            }
        }
	}
}
