/*

public class Node<T> {
        T data;
        Node<T> next;
        Node(T data) {
            this.data = data;
            next = null;
        }

    public static void main(String[] args) {
            Node<Integer> node1 = new Node<>(10);
            System.out.println(node1);
            System.out.println(node1.data);
            System.out.println(node1.next);
            Node<Integer> node2 = new Node<>(20);
            node1.next = node2;
            System.out.println(node1.next);
            System.out.println(node2);
            System.out.println(node2.data);
            System.out.println(node2.next);
            
            //Creating 3nodes then, linking and traversing it
            
            Node<Integer> node1 = new Node<>(10);
            Node<Integer> node2 = new Node<>(20);
            Node<Integer> node3 = new Node<>(30);
            node1.next = node2;
            node2.next = node3;
            
            Node<Integer> head = node1;
            while(head!=null) {
                System.out.print(head.data+" "+head.next);
                System.out.println();
                head = head.next;
            }
    }
}

*/





/*

public class Node<T> {
        T data;
        Node<T> next;
        Node(T data) {
            this.data = data;
            next = null;
        }
    public static void print(Node<Integer> head) {
            // that's how we create a head
            Node<Integer> temp = head;
            while(head!=null) {
                System.out.print(head.data+" "+head.next);
                System.out.println();
                head = head.next;
            }
            System.out.println();
            head = temp;
            while(head!=null) {
                System.out.print(head.data+" "+head.next);
                System.out.println();
                head = head.next;
            }
        }

    public static void main(String[] args) {
    Node<Integer> node1 = new Node<>(10);
    Node<Integer> node2 = new Node<>(20);
    Node<Integer> node3 = new Node<>(30);
    node1.next = node2;
    node2.next = node3;
    Node<Integer> head = node1;
    print(head);
    //it will again print the same list as main creates head at node1
    print(head);
    }
}

*/
