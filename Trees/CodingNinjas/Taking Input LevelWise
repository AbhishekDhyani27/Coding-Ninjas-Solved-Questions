import java.util.*;

public class TreeUse {

    public static void print(TreeNode<Integer> root) {
        String s = root.data + ": ";
        for(int i = 0; i < root.children.size(); i++) {
            s = s + root.children.get(i).data + ",";
        }
        System.out.println(s);
        for(int i = 0; i < root.children.size(); i++) {
            print(root.children.get(i));
        }
    }

    public static TreeNode<Integer> takeInputLevelWise() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the root node: ");
        int rootData = sc.nextInt();
        // creating queue using linkedList
        Queue<TreeNode<Integer>> pendingNodes = new LinkedList<>();
        // creating root node with rootData
        TreeNode<Integer> root = new TreeNode<>(rootData);
        // adding root data in queue
        pendingNodes.add(root);
        // while queue is not empty
        while (!pendingNodes.isEmpty()) {
            // pop front from the queue
            TreeNode<Integer> frontNode = pendingNodes.poll();
            System.out.println("Enter the number of children of "+frontNode.data);
            int numChildren = sc.nextInt();
            for(int i = 1; i <= numChildren; i++) {
                System.out.println("Enter the "+i+"th child of "+frontNode.data);
                int child = sc.nextInt();
                // creating childNode
                TreeNode<Integer> childNode = new TreeNode<>(child);
                // linking child node to frontNode
                frontNode.children.add(childNode);
                pendingNodes.add(childNode);
            }
        }
        return root;
    }
    
    public static void main(String[] args) {
          TreeNode<Integer> root = takeInputLevelWise();
          print(root);
    }
}
