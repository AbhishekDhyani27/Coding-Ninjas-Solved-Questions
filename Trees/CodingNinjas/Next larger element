Next larger element

Given a generic tree and an integer n. Find and return the node with next larger element in the Tree i.e. find a node with value just greater than n.
Return NULL if no node is present with value greater than n.

Input format :
Line 1 : Integer n
Line 2 : Elements in level order form separated by space (as per done in class). Order is -
Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : Node with value just greater than n.

Sample Input 1 :
18

10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
20

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public static TreeNode<Integer> findNextLargerNode(TreeNode<Integer> root, int n){
        if(root == null) {
            return null;  //edge case
        }

        // initially max is null
        TreeNode<Integer> max = null;

        // if data of root is greater than n then update max
        if(root.data > n) {
            max = root;
        }

        // checking maximum element in children nodes
        for(int i = 0; i < root.children.size(); i++) {
            TreeNode<Integer> childMax = findNextLargerNode(root.children.get(i), n);

            if(childMax == null) {
                continue;
            }
            else {

                // if max is null
                if(max == null) {
                    // update max to childMax
                    max = childMax;
                }
                else if(childMax.data > n  && childMax.data < max.data) {
                    max = childMax;
                }
            }
        }
        return max;
    }
