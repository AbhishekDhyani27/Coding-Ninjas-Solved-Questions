Node having sum of children and node is max

Given a tree, find and return the node for which sum of data of all children and the node itself is maximum.
In the sum, data of node itself and data of immediate children is to be taken.

Input format :
Line 1 : Elements in level order form separated by space (as per done in class). Order is -
Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : Node with maximum sum.

Sample Input 1 :
5 3 1 2 3 1 15 2 4 5 1 6 0 0 0 0

Sample Output 1 :
1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''

public static TreeNode<Integer> maxSumNode(TreeNode<Integer> root){
        TreeNode<Integer> ans = root;
        int sum = root.data;
        // Sum for root node
        for(int i = 0; i < root.children.size(); i++){
            sum += root.children.get(i).data;
        }

        for(int i = 0; i < root.children.size(); i++){
            //get the maximum node using recursion
            TreeNode<Integer> childMax = maxSumNode(root.children.get(i));
            int smallSum = childMax.data;
            // calculating sum for max node
            for(int j = 0; j < childMax.children.size(); j++) {
                smallSum += childMax.children.get(j).data;
            }
            //comparison & update if necessary
            if(sum <= smallSum) {
                ans = childMax;
                sum = smallSum;
            }
        }
        return ans;
    }
