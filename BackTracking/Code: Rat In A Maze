Code: Rat In A Maze

You are given a N*N maze with a rat placed at maze[0][0]. Find whether any path exist that rat can follow to reach its destination i.e. maze[N-1][N-1].
Rat can move in any direction ( left, right, up and down).
Value of every cell in the maze can either be 0 or 1. Cells with value 0 are blocked means rat cannot enter into those cells and those with value 1 are open.

Input Format:
Line 1: Integer N
Next N Lines: Each line will contain ith row elements (separated by space)

Output Format :
The output line contains true if any path exists for the rat to reach its destination otherwise print false.


Sample Input 1 :
3
1 0 1
1 0 1
1 1 1
Sample Output 1 :
true

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class RatInAMaze {
    public static void main(String[] args) {
        int[][] maze = {{1, 1, 0},
                        {1, 1, 0},
                        {1, 1, 1}};
        boolean PathPossible = ratInAMaze(maze);
        System.out.println(PathPossible);
    }

    private static boolean ratInAMaze(int[][] maze) {
        int n = maze.length;
        int[][] path  =  new int[n][n];
        return solveMaze(maze, 0, 0, path);
    }

    public static boolean solveMaze(int[][] maze, int i, int j, int[][] path) {
        // Check if i,j cell is valid or not
        int n = maze.length;
        // if i or j is out of bounds then return false
        // or if maze[i,j]==0 means there is no path then return false
        // or if path is already visited then return false
        if(i<0 || i>=n || j<0 || j>=n || maze[i][j]==0 || path[i][j]==1) {
             return false;
        }

        // Include cell in current path
        path[i][j] = 1;
        // if destination is reached
        if(i==n-1 && j==n-1) {
            return true;
        }

        // if cell is not the destination cell then explore all directions
        // top
        if(solveMaze(maze, i-1, j, path)) {
            return true;
        }
        // right
        if(solveMaze(maze, i, j+1, path)) {
            return true;
        }
        // down
        if(solveMaze(maze, i+1, j, path)) {
            return true;
        }
        // left
        if(solveMaze(maze, i, j-1, path)) {
            return true;
        }
        return false;
    }
}
