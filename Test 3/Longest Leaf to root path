Longest Leaf to root path

Given a binary tree, return the longest path from leaf to root.
Longest means, a path which contain maximum number of nodes from leaf to root.

Input format :
Elements in level order form (separated by space)
(If any node does not have left or right child, take -1 in its place)
Line 1 : Binary Tree 1 (separated by space)

Sample Input 1 :
5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1

Sample Output 1 :
9
3
6
5

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public static ArrayList<Integer> longestRootToLeafPath(BinaryTreeNode<Integer> root){
		// Write your code here
		// If root is null means there is no binary tree so return an empty vector
        if(root == null) {
            ArrayList<Integer> output = new ArrayList<>();
            return output;
        }

        // Recursive call on root.right
        ArrayList<Integer> right = longestRootToLeafPath(root.right);

        // Recursive call on root.left
        ArrayList<Integer> left = longestRootToLeafPath(root.left);

        // Compare the size of the two ArrayList and insert current node accordingly
        if(right.size() < left.size()) {
            left.add(root.data);
        }
        else {
            right.add(root.data);
        }

        // Return the appropriate ArrayList
        return (left.size() > right.size() ? left :right);
	}
