Check cousins

Given the binary Tree and two nodes say ‘p’ and ‘q’. Determine whether the two nodes are cousins of each other or not.
Two nodes are said to be cousins of each other if they are at same level of the Binary Tree and have different parents.
Do it in O(n).

Input format :
Line 1 : Nodes in level order form (separated by space). If any node does not have left or right child, take -1 in its place
Line 2 : integer value of p 
Line 3 : Integer value of q

Output format :
true or false

Constraints :
1 <= N <= 10^5

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

public class solution {

	public static boolean isCousin(BinaryTreeNode<Integer> root, int p, int q) {
		// Write your code here
        return findDepth(root,p,1) == findDepth(root,q,1) && !isSibling(root,p,q);
	}
    
    public static boolean isSibling(BinaryTreeNode<Integer> root, int p, int q) {
        if(root == null)
            return false;

        boolean checkSibling = false;
        //if left and right nodes are present, compare the values
        if(root.left != null && root.right != null)
            checkSibling = (root.left.data == p && root.right.data == q) ||
                    (root.left.data == q && root.right.data == p);

        return checkSibling || isSibling(root.left, p, q) || isSibling(root.right, p, q);
    }
    
    private static int findDepth(BinaryTreeNode<Integer> root, int val, int height) {
        if(root == null)
            return 0;
        if(root.data == val)
            return height;

        //check if the node is present in left subtree, if yes then return it
        int level = findDepth(root.left, val, height + 1);
        if (level != 0)
            return level;

        // if the node is not present in left subtree,check in right
        return findDepth(root.right, val, height + 1);
    }
}
