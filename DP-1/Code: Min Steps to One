Code: Min Steps to One

Given a positive integer 'n', find and return the minimum number of steps that 'n' has to take to get reduced to 1.
You can perform any one of the following 3 steps:
1.) Subtract 1 from it. (n = n - Â­1) ,
2.) If its divisible by 2, divide by 2.( if n % 2 == 0, then n = n / 2 ) ,
3.) If its divisible by 3, divide by 3. (if n % 3 == 0, then n = n / 3 ).  
Write brute-force recursive solution for this.

Input format :
The first and the only line of input contains an integer value, 'n'.

Output format :
Print the minimum number of steps.

Constraints :
1 <= n <= 200
Time Limit: 1 sec


Sample Input 1 :
4
Sample Output 1 :
2 
Explanation of Sample Output 1 :
For n = 4
Step 1 :  n = 4 / 2  = 2
Step 2 : n = 2 / 2  =  1 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
//USING MEMOIZATION
public class Solution {

	public static int countMinStepsToOne(int n) {
		int[] storage = new int[n + 1];
		return countStepsM(n, storage);
	}

	private static int countStepsM(int n, int[] storage) {
		if (n == 1) {
			storage[n] = 0;
			return storage[n];
		}

		if (storage[n] != 0) {
			return storage[n];
		}

		// 1st option
		int op1 = countStepsM(n - 1, storage);
		int minSteps = op1;

		// 2nd option
		if (n % 3 == 0) {
			int op2 = countStepsM(n / 3, storage);
			// if option2 is better
			if (op2 < minSteps) {
				minSteps = op2;
			}
		}

		// 3rd option
		if (n % 2 == 0) {
			int op3 = countStepsM(n / 2, storage);
			// if option2 is better
			if (op3 < minSteps) {
				minSteps = op3;
			}
		}

		// +1 because of starting step because we are doing at least one of the 3options
		storage[n] = 1 + minSteps;
		return storage[n];
	}
}


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

//USING RECURSION

public class Solution {

	public static int countMinStepsToOne(int n) {
		// if n is 1 then no steps are done so,Simply return 0
		if (n == 1) {
			return 0;
		}

		// 1st option
		int op1 = countMinStepsToOne(n - 1);
		int minSteps = op1;

		// 2nd option
		if (n % 3 == 0) {
			int op2 = countMinStepsToOne(n / 3);
			// if option2 is better
			if (op2 < minSteps) {
				minSteps = op2;
			}
		}

		// 3rd option
		if (n % 2 == 0) {
			int op3 = countMinStepsToOne(n / 2);
			// if option2 is better
			if (op3 < minSteps) {
				minSteps = op3;
			}
		}

		// +1 because of starting step because we are doing at least one of the 3options
		return minSteps + 1;
	}
}
