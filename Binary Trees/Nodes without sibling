Nodes without sibling

For a given Binary Tree of type integer, print all the nodes without any siblings.

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. 
Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The only line of output prints the node data in a top to down fashion with reference to the root. 
Node data in the left subtree will be printed first and then the right subtree.
A single space will separate them all.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.
Time Limit: 1 second

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'

public class Solution {
	public static void printNodesWithoutSibling(BinaryTreeNode<Integer> root) {
         if(root == null) {
            return;
        }
         // if right child is null and left is not null then print left child
        if(root.left != null && root.right == null){
            System.out.print(root.left.data+" ");
            
        }
         // if left child is null and right is not null then print right child
        else if(root.right != null && root.left == null){
            System.out.print(root.right.data+" ");
           
        }
        printNodesWithoutSibling(root.left);
        printNodesWithoutSibling(root.right);
	}
}
