Mirror a Binary Tree

For a given Binary Tree of type integer, update it with its corresponding mirror image.

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.

Output Format:
The only line of output prints the mirrored tree in a level-wise order. 
Each level will be printed on a new line. Elements printed at each level will be separated by a single line.

Note:
You are not required to print anything explicitly. It has already been taken care of.

Constraints:
1 <= N <= 10^5
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""'"""""""""""""""""""""""""""""""""""""'

public static void mirrorBinaryTree(BinaryTreeNode<Integer> root){
        if(root == null) {
            return;
        }
        mirrorBinaryTree(root.left);
        mirrorBinaryTree(root.right);
        // swapping left node with right node by taking temp variable
        BinaryTreeNode<Integer> temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
